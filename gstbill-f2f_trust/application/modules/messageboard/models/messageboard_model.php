<?phpif (!defined('BASEPATH'))    exit('No direct script access allowed');class Messageboard_model extends CI_Model {    public $table_name = 'messageboard';    private $member_type_table = "member_type";    private $users = "users";    private $message_received_status = "message_received_status";    private $chat_history = "chat_history";    private $chat_messages = "chat_messages";    var $column_search = array('S.sponsor_name', 'S.residing_country', 'C.countries_name', 'S.for_year', 'S.paid', 'S.status');    function __construct() {        parent::__construct();        $this->load->database();    }    public function get_all_messageboard($searchString, $forYearFrom, $forYearTo, $this_member_id, $this_member_type_id = null) {        $this_user_type_id = $this->user_auth->get_user_type_id();        $this->db->select('MB.id AS messageboard_id, MB.caption, MB.message as messageboard_message, MB.member_type_id, MB.member_id, MB.receiver_type,  MB.has_confirmation, MB.accept_count, MB.reject_count, MB.total_count, MB.created_by, U_MN.name as member_name, MB.created_date, MT.name as member_type_name, U.username as created_by_name,SUM((CASE WHEN (CM.message_id = MB.id AND CM.receiver_id = ' . $this_member_id . ' AND CM.view_status = 0) THEN 1 ELSE 0 END)) AS view_count');        $this->db->join($this->member_type_table . ' AS MT', 'MB.member_type_id = MT.id', 'LEFT');        $this->db->join($this->users . ' AS U', 'U.id = MB.created_by', 'LEFT');        $this->db->join($this->users . ' AS U_MN', 'U_MN.id = MB.member_id', 'LEFT');        $this->db->join($this->chat_messages . " AS CM", "CM.message_id = MB.id", "LEFT");        $this->db->group_by("CM.message_id");        $where = "";        if ($searchString) {            $i = 0;            foreach ($this->column_search as $item) { // loop column                if ($i == 0) { // first loop                    $where .="(";                }                $where .= '' . $item . " like '%" . $searchString . "%'";                if ((count($this->column_search) - 1) != $i)                    $where .= ' OR ';                if ((count($this->column_search) - 1) == $i)                    $where .= ")";                $i++;            }        }        if ($where != '')            $this->db->where($where);        if ($forYearFrom != "" && $forYearTo != "") {            $this->db->where('DATE_FORMAT(MB.created_date,"%Y-%m-%d")>=', $forYearFrom);            $this->db->where('DATE_FORMAT(MB.created_date,"%Y-%m-%d")<=', $forYearTo);        }        $this->db->where("( MB.created_by = $this_member_id OR (MB.receiver_type = 3) OR(MB.receiver_type = 1 AND MB.member_type_id = $this_member_type_id ) OR (MB.receiver_type = 2 AND MB.member_id = $this_member_id) OR (MB.receiver_type = 4 && (MB.created_by = $this_member_id || $this_user_type_id = 1) ))");//        if ($this_member_type_id == "") {//            $this->db->where('(MB.created_by = ' . $this_member_id . ' OR MB.member_id = ' . $this_member_id . ' OR MB.receiver_type = 3)');//        } else {//            $this->db->where('(MB.created_by = ' . $this_member_id . ' OR MB.member_type_id = ' . $this_member_type_id . ' OR MB.receiver_type = 3)');//        }////        $this->db->select('(CASE WHEN MB.receiver_type == "1" THEN MB.member_type_id = ELSE "N/A" END) AS segment_name');        $this->db->order_by("MB.id", "desc");        $query = $this->db->get($this->table_name . ' AS MB');        //echo $this->db->last_query();        //exit;        if ($query->num_rows() > 0) {            return $query->result_array();        }        return NULL;    }    public function get_all_member_type() {        $this->db->select($this->member_type_table . '.*');        $this->db->where("status = 1");        $this->db->where("is_deleted = 0");        $query = $this->db->get($this->member_type_table);        if ($query->num_rows > 0) {            return $query->result_array();        } else {            return NULL;        }    }    public function get_all_members($created_by = null) {        $this->db->select($this->users . '.id,username');        $this->db->where("status = 1");        $this->db->where("is_deleted = 0");        if ($created_by) {            $this->db->where("id != " . $created_by);        }        $query = $this->db->get($this->users);        if ($query->num_rows > 0) {            return $query->result_array();        } else {            return NULL;        }    }    public function get_all_gender() {        $this->db->select($this->gender . '.*');        $this->db->where("status = 1");        $this->db->where("is_deleted = 0");        $query = $this->db->get($this->gender);        if ($query->num_rows > 0) {            return $query->result_array();        } else {            return NULL;        }    }    public function insert($data) {        if ($this->db->insert($this->table_name, $data)) {            $insert_id = $this->db->insert_id();            return $insert_id;            exit;        }        return FALSE;    }    public function get_all_members_by_type($member_type, $created_by = null) {        $this->db->select($this->users . '.id');        $this->db->where("member_type_id = " . $member_type);        $this->db->where("status = 1");        $this->db->where("is_deleted = 0");        if ($created_by) {            $this->db->where("id != " . $created_by);        }        $query = $this->db->get($this->users);        if ($query->num_rows > 0) {            return $query->result_array();        } else {            return NULL;        }    }    public function insert_message_received($data_message_received) {        if ($this->db->insert($this->message_received_status, $data_message_received)) {            $insert_id = $this->db->insert_id();            return $insert_id;            exit;        }        return FALSE;    }    public function get_all_member_messages($messageboard_id) {        $this->db->select('MR.*, U.username, U.profile_picture');        $this->db->join($this->users . ' AS U', 'U.id = MR.member_id', 'LEFT');        $this->db->where("MR.message_id = " . $messageboard_id);        $query = $this->db->get($this->message_received_status . ' AS MR');        if ($query->num_rows > 0) {            return $query->result_array();        } else {            return NULL;        }    }    public function get_message_received_status_by_id($message_received_id) {        $this->db->select("*");        $this->db->where("id = " . $message_received_id);        $query = $this->db->get($this->message_received_status);        if ($query->num_rows > 0) {            return $query->result_array();        } else {            return NULL;        }    }    public function get_chat($message_id, $member_id) {        $this->db->select('CH.*, U.username, U.profile_picture');        $this->db->join($this->users . ' AS U', 'U.id = CH.member_id', 'LEFT');        $this->db->where("CH.message_id = " . $message_id);        $this->db->where("CH.member_id = " . $member_id);        $query = $this->db->get($this->chat_history . ' AS CH');        if ($query->num_rows > 0) {            return $query->result_array();        } else {            return NULL;        }    }    public function get_user_by_id($member_id) {        $this->db->select('*');        $this->db->where("id = " . $member_id);        $query = $this->db->get($this->users);        if ($query->num_rows > 0) {            return $query->result_array();        } else {            return NULL;        }    }    public function get_messageboard_by_id($messageboard_id) {        $this->db->select('*');        $this->db->where("id = " . $messageboard_id);        $query = $this->db->get($this->table_name);        if ($query->num_rows > 0) {            return $query->result_array();        } else {            return NULL;        }    }    public function get_messageboard_details_by_id($messageboard_id) {        $this->db->select('MB.*,U.username as creator_name,U.profile_picture as creator_profile_picture');        $this->db->join($this->users . " AS U", "U.id = MB.created_by", "LEFT");        $this->db->where("MB.id = " . $messageboard_id);        $query = $this->db->get($this->table_name . " AS MB");        if ($query->num_rows > 0) {            return $query->result_array();        } else {            return NULL;        }    }    public function get_new_messages1($member_id) {        $this->db->select("MR.*,MB.id AS messageboard_id,MB.caption, MB.message, MB.created_by, MB.created_date,MB.has_confirmation, U.username");        $this->db->join($this->table_name . ' AS MB', 'MB.id = MR.message_id', 'LEFT');        $this->db->join($this->users . ' AS U', 'U.id = MB.created_by', 'LEFT');        $this->db->where("MR.member_id = " . $member_id);        $this->db->where("MR.view_status = 0");        $this->db->order_by("MR.id", "desc");        $this->db->limit(1);        $query = $this->db->get($this->message_received_status . ' AS MR');        if ($query->num_rows > 0) {            //print_r($query->result_array());            //exit;            return $query->result_array();        } else {            return NULL;        }    }    public function update_message_received_status($data, $message_received_status_id) {        $this->db->where('id', $message_received_status_id);        if ($this->db->update($this->message_received_status, $data)) {            return TRUE;        } else {            return FALSE;        }    }    public function increment_accept_count_messageboard($messageboard_id) {        $query = $this->db->query("UPDATE " . $this->table_name . " SET accept_count = accept_count + 1 WHERE id = " . $messageboard_id);        if ($query) {            return TRUE;        } else {            return NULL;        }    }    public function increment_reject_count_messageboard($messageboard_id) {        $query = $this->db->query("UPDATE " . $this->table_name . " SET reject_count = reject_count + 1 WHERE id = " . $messageboard_id);        if ($query) {            return TRUE;        } else {            return NULL;        }    }    public function update_messageboard($data, $id) {        $this->db->where('id', $id);        if ($this->db->update($this->table_name, $data)) {            return TRUE;        } else {            return FALSE;        }    }    public function get_messages_of_created_member($member_id, $messageboard_id) {        $this->db->select("CM.*, sender_detail.username AS sender_name,sender_detail.profile_picture AS sender_profile_picture,receiver_detail.username AS receiver_name,receiver_detail.profile_picture AS receiver_profile_picture");        $this->db->join($this->users . " AS sender_detail", "CM.sender_id = sender_detail.id", 'LEFT');        $this->db->join($this->users . " AS receiver_detail", "CM.receiver_id = receiver_detail.id", 'LEFT');        $this->db->where("CM.message_id = " . $messageboard_id);        $this->db->group_by(array('sender_id', 'message_id', 'message'));        $this->db->having("is_source_message = 0");        $this->db->order_by("created_date");        $query = $this->db->get($this->chat_messages . " AS CM");//        echo $this->db->last_query();//        exit;        if ($query->num_rows > 0) {            return $query->result_array();        } else {            return NULL;        }    }    public function get_messages_of_received_member($member_id, $messageboard_id) {        $this->db->select("CM.*, sender_detail.username AS sender_name,sender_detail.profile_picture AS sender_profile_picture,receiver_detail.username AS receiver_name,receiver_detail.profile_picture AS receiver_profile_picture");        $this->db->join($this->users . " AS sender_detail", "CM.sender_id = sender_detail.id", 'LEFT');        $this->db->join($this->users . " AS receiver_detail", "CM.receiver_id = receiver_detail.id", 'LEFT');        $this->db->where("(CM.receiver_id = " . $member_id . " OR CM.sender_id = " . $member_id . ") AND CM.message_id = " . $messageboard_id);        //$this->db->or_where("CM.sender_id = " . $member_id);        //$this->db->where("CM.message_id = " . $messageboard_id);        $query = $this->db->get($this->chat_messages . " AS CM");        //echo $this->db->last_query();        //exit;        if ($query->num_rows > 0) {            return $query->result_array();        } else {            return NULL;        }    }    public function update_view_of_created_member($member_id, $messageboard_id) {        $data = array(            "view_status" => 1        );        $this->db->join($this->table_name . " AS MB", "CM.message_id = MB.id", 'LEFT');        $this->db->where("CM.message_id = " . $messageboard_id);        $this->db->where("CM.receiver_id = " . $member_id);        $this->db->where("CM.is_source_message = 0");        $query = $this->db->update($this->chat_messages . " AS CM", $data);//        echo $this->db->last_query();//        exit;        if ($query) {            return TRUE;        } else {            return NULL;        }    }    public function insert_chat_history($data) {        if ($this->db->insert($this->chat_history, $data)) {            $insert_id = $this->db->insert_id();            return $insert_id;            exit;        }        return FALSE;    }    public function get_chat_history($board_id, $mem_id, $created_user) {        $this->db->select('*');        $this->db->where("message_id", $board_id)->where("(receiver_id=" . $mem_id . " OR sender_id=" . $mem_id . " OR accept_status !='0')");        // $this->db->where('message_id', $board_id, false);        // $this->db->or_where('receiver_id', $mem_id);        //$this->db->or_where('sender_id', $mem_id);        // $this->db->or_where('accept_status !=', 0);        $query = $this->db->get('chat_history')->result_array();        echo "<pre>";        print_r($query);        exit;    }    public function insert_chat_messages($data) {        if ($this->db->insert($this->chat_messages, $data)) {            $insert_id = $this->db->insert_id();            return $insert_id;            exit;        }        return FALSE;    }    public function get_new_messages($member_id, $id) {        $this->db->select("CM.*,MB.id AS messageboard_id,MB.caption, MB.message AS messageboard_message, MB.created_by, MB.created_date,MB.has_confirmation, U.username,Sender.username AS sender_name");        $this->db->join($this->table_name . ' AS MB', 'MB.id = CM.message_id', 'LEFT');        $this->db->join($this->users . ' AS U', 'U.id = MB.created_by', 'LEFT');        $this->db->join($this->users . ' AS Sender', 'Sender.id = CM.sender_id', 'LEFT');        $this->db->where("CM.receiver_id = " . $member_id);        $this->db->where("CM.message_id = " . $id);        $this->db->where("CM.view_status = 0");        $this->db->order_by("CM.id", "asc");        //$this->db->limit(1);        $query = $this->db->get($this->chat_messages . ' AS CM');        if ($query->num_rows > 0) {            //print_r($query->result_array());            //exit;            return $query->result_array();        } else {            return NULL;        }    }    public function update_chat_message($data, $id) {        $this->db->where('id', $id);        if ($this->db->update($this->chat_messages, $data)) {            return TRUE;        } else {            return FALSE;        }    }    public function get_user_by_admin_id() {        $this->db->select('*');        $this->db->where("user_type_id", "1");        $this->db->where("is_deleted", "0");        $query = $this->db->get($this->users);        if ($query->num_rows > 0) {            return $query->result_array();        } else {            return NULL;        }    }}