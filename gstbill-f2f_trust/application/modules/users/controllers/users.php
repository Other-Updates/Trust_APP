<?phpif (!defined('BASEPATH'))    exit('No direct script access allowed');class Users extends MX_Controller {    function __construct() {        parent::__construct();        if (!in_array($this->router->method, array('login', 'logout', 'register', 'forget_password', 'verify_login', 'update_credential'))) {            if (!$this->user_auth->is_logged_in()) {                //redirect($this->config->item('base_url') . 'users/login');            }        }        $main_module = 'users';        $access_arr = array(            'users/index' => "no_restriction",            'users/my_profile' => "no_restriction",            'users/getProfileData' => "no_restriction",            'users/getPermissions' => "no_restriction",            'users/get_country_list' => "no_restriction",            'users/logout' => "no_restriction",            'users/login' => "no_restriction",            'users/update_credential' => "no_restriction",            'users/verify_login' => "no_restriction",            'users/login_update_profile' => "no_restriction",            'users/update_myprofile' => "no_restriction",            'users/get_street_list' => "no_restriction",            'users/get_user_type' => "no_restriction",        );        if (!$this->user_auth->is_permission_allowed($access_arr, $main_module)) {            //redirect($this->config->item('base_url'));        }        $this->load->model('masters/users_model');        $this->load->model('members/members_model');        $this->load->model('api/increment_model');    }    function index() {        $data = array();        $data['title'] = 'Users - Manage Users';        $data['users'] = $this->users_model->get_all_users();        $this->template->write_view('content', 'users/index', $data);        $this->template->render();    }    function login($status = NULL) {        $this->template->set_master_template('../../themes/esms/template_login.php');        $this->template->write_view('content', 'users/login');        $this->template->render();    }    function verify_login() {        $data = array();        if ($this->input->post()) {            $username = $this->input->post('username');            $password = $this->input->post('password');            $user_auth = ($this->user_auth->login($username, $password));            if (is_array($user_auth)) {                $data = $user_auth;            } else {                $data['status'] = $user_auth;            }        }        echo json_encode($data);    }    function getPermissions() {        $data['sections'] = $this->user_auth->get_from_session('sections');        $data['modules'] = $this->user_auth->get_from_session('modules');        echo json_encode($data);    }    function logout() {        $data = array();        $this->user_auth->logout();        redirect($this->config->item('base_url') . 'users/login');    }    function update_credential() {        $this->template->set_master_template('../../themes/esms/template_login.php');        $this->template->write_view('content', 'users/login_update_profile');        $this->template->render();    }    function login_update_profile() {        $user_id = $this->input->post("user_id");        $username = $this->input->post("username");        $password = $this->input->post("password");        $check_username_exists = $this->users_model->is_user_available($username, $user_id);        if (!empty($check_username_exists[0]['id'])) {            $status = "username_exists";        } else {            $data_update_user = array(                'username' => $username,                'password' => $password,                'is_new_user' => "0",            );            $update_user = $this->users_model->update_user($data_update_user, $user_id);            if ($update_user) {                $status = "success";            } else {                $status = "failed";            }        }        $data = array(            'status' => $status        );        echo json_encode($data);    }    function my_profile() {        //$data_msg_notify['new_message'] = $this->user_auth->get_new_message();        //$this->template->write_view('popup', 'users/messageboard_notify', $data_msg_notify);        $data = array();        $id = $this->user_auth->get_user_id();        $data['title'] = 'My Profile';//        if ($this->input->post('user')) {////// Profile Picture////            $profile_image = NULL;//            $config['upload_path'] = './attachments/profile_image/';//            $allowed_types = array('jpg', 'jpeg', 'png');//            $config['allowed_types'] = implode('|', $allowed_types);//            $config['max_size'] = '10000';//            $this->load->library('upload', $config);//            $this->upload->initialize($config);//            if (!empty($_FILES['profile_image']['name'])) {////                $_FILES['profile_image'] = array(//                    'name' => $_FILES['profile_image']['name'],//                    'type' => $_FILES['profile_image']['type'],//                    'tmp_name' => $_FILES['profile_image']['tmp_name'],//                    'error' => $_FILES['profile_image']['error'],//                    'size' => $_FILES['profile_image']['size']//                );////                $random_hash = substr(str_shuffle(time()), 0, 3) . strrev(mt_rand(100000, 999999));//                $extension = pathinfo($_FILES['profile_image']['name'], PATHINFO_EXTENSION);//                $config['file_name'] = 'PI_' . $random_hash . '.' . $extension;//                $this->upload->initialize($config);//                $this->upload->do_upload('profile_image');//                $upload_data = $this->upload->data();////// Make thumbnail image////                $this->load->library('image_lib');//                $config['image_library'] = 'gd2';//                $config['source_image'] = FCPATH . 'attachments/profile_image/' . $upload_data['file_name'];//                $config['create_thumb'] = TRUE;//                $config['maintain_ratio'] = FALSE;//                $config['width'] = 150;//                $config['height'] = 150;//                $config['new_image'] = FCPATH . 'attachments/profile_image/thumb/' . $upload_data['file_name'];//                $this->image_lib->initialize($config);//                $this->image_lib->resize();//                $profile_image = base_url() . 'attachments/profile_image/' . $upload_data['file_name'];//            }//            $user = $this->input->post('user');//            if (!empty($profile_image))//                $user['profile_image'] = $profile_image;////            if (empty($user['password']) || trim($user['password']) == '')//                unset($user['password']);//            else//                $user['password'] = md5($user['password']);//            $user['updated_date'] = date('Y-m-d H:i:s');//            $update = $this->users_model->update_user($user, $id);//            if (!empty($update)) {//                $this->session->set_flashdata('flashSuccess', 'User successfully updated!');//                redirect($this->config->item('base_url'));//            }//        }//        $data['user'] = $this->users_model->get_user_by_id($id);        $this->template->write_view('content', 'users/my_profile', $data);        $this->template->render();    }    function getProfileData() {        $id = $this->user_auth->get_user_id();        $profileData = $this->users_model->get_userprofile_by_id($id);        echo json_encode($profileData);    }    function update_myprofile() {        $member_id = $this->user_auth->get_user_id();        $username = $this->input->post('username');        $password = $this->input->post('password');        $email = $this->input->post('email');        $member_details = $this->members_model->get_member_by_id($member_id);        $check_username_exists = $this->members_model->is_username_available($username, $member_id);        $check_email_exists = $this->members_model->is_email_available($email, $member_id);        if (!empty($check_username_exists[0]['id'])) {            if ($check_username_exists[0]['is_deleted'] == "1") {                $data['status'] = "username_deleted";            } else {                $data['status'] = "username_exists";            }        } else        if (!empty($check_email_exists[0]['id'])) {            if ($check_email_exists[0]['is_deleted'] == "1") {                $data['status'] = "email_deleted";            } else {                $data['status'] = "email_exists";            }        } else {            $name = $this->input->post('member_name');            $password = $this->input->post('password');            $dob = $this->input->post('dob');            $lifetime_member = $this->input->post('lifetime_member');            $door_no = $this->input->post('door_no');            $street = $this->input->post('street');            $country = $this->input->post('country');            $qualification = $this->input->post('qualification');            $occupation = $this->input->post('occupation');            $member_since = $this->input->post('member_since');            $mobile_number = $this->input->post('mobile_number');            $landline_number = $this->input->post('landline_number');            $status = $this->input->post('status');            $member_type_id = $this->input->post('member_type_id');            $date = date('Y-m-d H:i:s');            $member_data = array(                'username' => $this->input->post('username'),                //'password' => $this->input->post('password'),                'email' => $this->input->post('email'),                'name' => $this->input->post('member_name'),                'dob' => $this->input->post('dob'),                'door_no' => $this->input->post('door_no'),                'street_name' => $this->input->post('street'),                'address' => $this->input->post('address'),                'residing_country' => $this->input->post('country'),                'qualification' => $this->input->post('qualification'),                'occupation' => $this->input->post('occupation'),                'mobile_number' => $this->input->post('mobile_number'),                'landline_number' => $this->input->post('landline_number'),                'is_new_user' => "0",                'updated_date' => $date            );            $update = $this->members_model->update_member($member_data, $member_id);            if ($password != "") {                $member_pwd_data = array(                    'password' => $this->input->post('password'),                );                $update_pwd = $this->members_model->update_member($member_pwd_data, $member_id);            }            if ($password != "") {                $member_pwd_data = array(                    'password' => $this->input->post('password'),                );                $update_pwd = $this->members_model->update_member($member_pwd_data, $member_id);            }            $this->session->set_flashdata('flashSuccess', 'Member Updates');            if ($update) {                $update_status = "success";                if (isset($_FILES['profile_image']['name'])) {                    $filename = $_FILES['profile_image']['name'];                    $profile_image = NULL;                    $config['upload_path'] = './attachments/profile_image/';                    $allowed_types = array('jpg', 'jpeg', 'png');                    $config['allowed_types'] = implode('|', $allowed_types);                    $config['max_size'] = '10000';                    $this->load->library('upload', $config);                    $this->upload->initialize($config);                    if (!empty($_FILES['profile_image']['name'])) {                        $_FILES['profile_image'] = array(                            'name' => $_FILES['profile_image']['name'],                            'type' => $_FILES['profile_image']['type'],                            'tmp_name' => $_FILES['profile_image']['tmp_name'],                            'error' => $_FILES['profile_image']['error'],                            'size' => $_FILES['profile_image']['size']                        );                        $random_hash = substr(str_shuffle(time()), 0, 3) . strrev(mt_rand(100000, 999999));                        $extension = pathinfo($_FILES['profile_image']['name'], PATHINFO_EXTENSION);                        $config['file_name'] = 'PI_' . $random_hash . '.' . $extension;                        $this->upload->initialize($config);                        $this->upload->do_upload('profile_image');                        $upload_data = $this->upload->data();                        // Make thumbnail image                        $this->load->library('image_lib');                        $config['image_library'] = 'gd2';                        $config['source_image'] = FCPATH . 'attachments/profile_image/' . $upload_data['file_name'];                        $config['create_thumb'] = TRUE;                        $config['maintain_ratio'] = FALSE;                        $config['width'] = 150;                        $config['height'] = 150;                        $config['new_image'] = FCPATH . 'attachments/profile_image/thumb/' . $upload_data['file_name'];                        $this->image_lib->initialize($config);                        $this->image_lib->resize();                        //$profile_image = base_url() . 'attachments/profile_image/' . $upload_data['file_name'];                        $profile_image = $upload_data['file_name'];                    }                    if ($profile_image) {                        $update_profile['profile_picture'] = $profile_image;                        $update_result = $this->members_model->update_profile_image($member_id, $update_profile);                    }                }            } else {                $update_status = "failed";            }            $data['status'] = $update_status;        }        echo json_encode($data);    }    function get_country_list() {        $data['country'] = $this->members_model->get_all_country();        echo json_encode($data);    }    function get_street_list() {        $data['street'] = $this->members_model->get_all_street();        echo json_encode($data);    }    function get_user_type() {        $data['user_type_id'] = $this->user_auth->get_user_type_id();        echo json_encode($data);    }}